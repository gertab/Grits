// Banking example

type bankType = aff &{ login : authType,
                       gen_query : bankType}

type authType = aff +{ auth : lin /\ aff transaction, 
                       not_auth : bankType }

type transaction = lin +{start : +{finish : 1}}

let bank() : bankType =
      case self (
          login<s>     => auth <- new authService();
                          self.auth<auth>
                          //b <- new bank();
                          //self.not_auth<b>
        | gen_query<s> => bank()
    )

let authService() : lin /\ aff transaction =
    s' <- shift self;
    // Perform transaction in linear mode
    s'' : lin 1 <- new close self;
    s''' : lin +{finish : 1} <- new self.finish<s''>;
    self.start<s'''>


//prc[bankService] : bankType = bank()
//prc[user1] : lin 1 = drop bankService; 
//                     close self

//prc[bankService] : bankType = bank()
let user(bankService : bankType) : lin 1 =
    print _attempt_login_;
    b : authType <- new bankService.login<self>; 
    case b (
         auth<b'> => 
             t :  transaction <- new cast b'<self>;
             // not possible to drop t (since it is now linear)
             case t (
                start<t'> => print _perform_linear_transaction_;
                              case t' (
                                finish<t''> => wait t''; close self
                              )
             )

       | not_auth<b'> => drop b'; close self
    )

// let main() : lin 1 =    // main process
//     b : bankType <- new bank();
//     user(b) 
//   
// exec main() // launch main process

assuming bankService : bankType
prc[user1] : lin 1 = user(bankService)