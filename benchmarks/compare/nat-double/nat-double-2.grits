
type nat = +{zero : 1, succ : nat}

let double(x : nat) : nat =
    case x (
          zero<x'> => self.zero<x'>
        | succ<x'> => h <- new double(x');
                      d : nat <- new self.succ<h>;
                      self.succ<d>
    )

let plus1(y : nat) : nat = 
    case y (
          zero<x'> => x'' : nat <- new self.zero<x'>;
                      self.succ<x''>
        | succ<x'> => x'' <- new plus1(x');
                      self.succ<x''>
    )

// Print result
let printNat(n : nat) : 1 = 
          y <- new consumeNat(n); 
          wait y;
          close self

let consumeNat(n : nat) : 1 = 
        case n ( zero<c> => print zero; wait c; close self
               | succ<c> => print succ; consumeNat(c))


// Initiate execution
prc[d0] : nat =
    t : 1 <- new close self;
    z  : nat <- new self.zero<t>;
    self.succ<z>
prc[b] : nat = 
    d1 <- new double(d0);
    d2 <- new double(d1);
    fwd self d2
prc[c] : 1 = printNat(b)