// Some example programs from the paper 'Semi-Axiomatic Sequent Calculus' (Annex B)

type A1 = 1
type B1 = 1
type C1 = 1
let eg1(x : A1 -* B1, y : B1 -* C1) : A1 -* C1 =
    <u, w> <- recv self; 
    b : B1 <- new send x<u, b>;
    send y<b, w>


type A2 = 1
type B2 = 1 * 1
let eg2(x : &{left : A2, right : B2}) : A2 * B2 =
    <x', x''> <- split x;
    y : A2 <- new x'.left<self>;
    z : B2 <- new x''.right<self>;
    send self<y, z>


type A3 = 1
type B3 = 1 * 1
let eg3(x : A3 * B3) : &{left : A3, right : B3} =
    <y, z> <- recv x;
    case self (
        left<u>  => drop z; fwd u y
      | right<v> => drop y; fwd v z
    ) 

type A4 = 1
type B4 = 1 * 1
type C4 = 1 * 1
let eg4(p : &{left : A4 -* C4, right : B4 -* C4}) : +{left : A4, right : B4} -* C4 = 
    <s, z> <- recv self;
    case s (
        left<x>  => r : A4 -* C4 <- new p.left<r>;
                    send r<x, z>  // z is self
      | right<y> => t : B4 -* C4 <- new p.right<t>;
                    send t<y, z>
    )
