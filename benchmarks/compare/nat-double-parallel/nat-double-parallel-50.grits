
///////// Initiate execution /////////

prc[a] : listNat = runTests()
//prc[b] : 1 = printList(a)

///////// Natural number type and function definitions /////////

type nat = +{zero : 1, succ : nat}
type listNat = +{cons : nat * listNat, nil : 1}

let double(x : nat) : nat =
case x (
		zero<x'> => self.zero<x'>
	| succ<x'> => h <- new double(x');
					d : nat <- new self.succ<h>;
					self.succ<d>
)

// Creates an empty list
let emptyList() : listNat =
  term : 1 <- new close self;
  self.nil<term>

// Appends an element to an existing list
let appendElement(elem : nat, K : listNat) : listNat =
  next : nat * listNat <- new (send self<elem, K>);
  self.cons<next>

// Doubles a number 5 times (i.e. produces 2^5). It needs to receive a 'start' message to initiate execution
let performSomeDoubling() : &{start : nat} =
	case self (
		start<result> =>
		a <- new nat1();
		d1 <- new double(a);
		d2 <- new double(d1);
		d3 <- new double(d2);
		d4 <- new double(d3);
		d5 <- new double(d4);
		fwd result d5
	)
	
// Creates the testing environment
let runTests() : listNat =
    // Spawn all parallel instances
    instance1 <- new performSomeDoubling();
    instance2 <- new performSomeDoubling();
    instance3 <- new performSomeDoubling();
    instance4 <- new performSomeDoubling();
    instance5 <- new performSomeDoubling();
    instance6 <- new performSomeDoubling();
    instance7 <- new performSomeDoubling();
    instance8 <- new performSomeDoubling();
    instance9 <- new performSomeDoubling();
    instance10 <- new performSomeDoubling();
    instance11 <- new performSomeDoubling();
    instance12 <- new performSomeDoubling();
    instance13 <- new performSomeDoubling();
    instance14 <- new performSomeDoubling();
    instance15 <- new performSomeDoubling();
    instance16 <- new performSomeDoubling();
    instance17 <- new performSomeDoubling();
    instance18 <- new performSomeDoubling();
    instance19 <- new performSomeDoubling();
    instance20 <- new performSomeDoubling();
    instance21 <- new performSomeDoubling();
    instance22 <- new performSomeDoubling();
    instance23 <- new performSomeDoubling();
    instance24 <- new performSomeDoubling();
    instance25 <- new performSomeDoubling();
    instance26 <- new performSomeDoubling();
    instance27 <- new performSomeDoubling();
    instance28 <- new performSomeDoubling();
    instance29 <- new performSomeDoubling();
    instance30 <- new performSomeDoubling();
    instance31 <- new performSomeDoubling();
    instance32 <- new performSomeDoubling();
    instance33 <- new performSomeDoubling();
    instance34 <- new performSomeDoubling();
    instance35 <- new performSomeDoubling();
    instance36 <- new performSomeDoubling();
    instance37 <- new performSomeDoubling();
    instance38 <- new performSomeDoubling();
    instance39 <- new performSomeDoubling();
    instance40 <- new performSomeDoubling();
    instance41 <- new performSomeDoubling();
    instance42 <- new performSomeDoubling();
    instance43 <- new performSomeDoubling();
    instance44 <- new performSomeDoubling();
    instance45 <- new performSomeDoubling();
    instance46 <- new performSomeDoubling();
    instance47 <- new performSomeDoubling();
    instance48 <- new performSomeDoubling();
    instance49 <- new performSomeDoubling();
    instance50 <- new performSomeDoubling();

    // Ask all instances to start
    instance1result : nat <- new instance1.start<self>;
    instance2result : nat <- new instance2.start<self>;
    instance3result : nat <- new instance3.start<self>;
    instance4result : nat <- new instance4.start<self>;
    instance5result : nat <- new instance5.start<self>;
    instance6result : nat <- new instance6.start<self>;
    instance7result : nat <- new instance7.start<self>;
    instance8result : nat <- new instance8.start<self>;
    instance9result : nat <- new instance9.start<self>;
    instance10result : nat <- new instance10.start<self>;
    instance11result : nat <- new instance11.start<self>;
    instance12result : nat <- new instance12.start<self>;
    instance13result : nat <- new instance13.start<self>;
    instance14result : nat <- new instance14.start<self>;
    instance15result : nat <- new instance15.start<self>;
    instance16result : nat <- new instance16.start<self>;
    instance17result : nat <- new instance17.start<self>;
    instance18result : nat <- new instance18.start<self>;
    instance19result : nat <- new instance19.start<self>;
    instance20result : nat <- new instance20.start<self>;
    instance21result : nat <- new instance21.start<self>;
    instance22result : nat <- new instance22.start<self>;
    instance23result : nat <- new instance23.start<self>;
    instance24result : nat <- new instance24.start<self>;
    instance25result : nat <- new instance25.start<self>;
    instance26result : nat <- new instance26.start<self>;
    instance27result : nat <- new instance27.start<self>;
    instance28result : nat <- new instance28.start<self>;
    instance29result : nat <- new instance29.start<self>;
    instance30result : nat <- new instance30.start<self>;
    instance31result : nat <- new instance31.start<self>;
    instance32result : nat <- new instance32.start<self>;
    instance33result : nat <- new instance33.start<self>;
    instance34result : nat <- new instance34.start<self>;
    instance35result : nat <- new instance35.start<self>;
    instance36result : nat <- new instance36.start<self>;
    instance37result : nat <- new instance37.start<self>;
    instance38result : nat <- new instance38.start<self>;
    instance39result : nat <- new instance39.start<self>;
    instance40result : nat <- new instance40.start<self>;
    instance41result : nat <- new instance41.start<self>;
    instance42result : nat <- new instance42.start<self>;
    instance43result : nat <- new instance43.start<self>;
    instance44result : nat <- new instance44.start<self>;
    instance45result : nat <- new instance45.start<self>;
    instance46result : nat <- new instance46.start<self>;
    instance47result : nat <- new instance47.start<self>;
    instance48result : nat <- new instance48.start<self>;
    instance49result : nat <- new instance49.start<self>;
    instance50result : nat <- new instance50.start<self>;

    // Collect all results in one list
    list0  <- new emptyList();
    list1 <- new appendElement(instance1result, list0);
    list2 <- new appendElement(instance2result, list1);
    list3 <- new appendElement(instance3result, list2);
    list4 <- new appendElement(instance4result, list3);
    list5 <- new appendElement(instance5result, list4);
    list6 <- new appendElement(instance6result, list5);
    list7 <- new appendElement(instance7result, list6);
    list8 <- new appendElement(instance8result, list7);
    list9 <- new appendElement(instance9result, list8);
    list10 <- new appendElement(instance10result, list9);
    list11 <- new appendElement(instance11result, list10);
    list12 <- new appendElement(instance12result, list11);
    list13 <- new appendElement(instance13result, list12);
    list14 <- new appendElement(instance14result, list13);
    list15 <- new appendElement(instance15result, list14);
    list16 <- new appendElement(instance16result, list15);
    list17 <- new appendElement(instance17result, list16);
    list18 <- new appendElement(instance18result, list17);
    list19 <- new appendElement(instance19result, list18);
    list20 <- new appendElement(instance20result, list19);
    list21 <- new appendElement(instance21result, list20);
    list22 <- new appendElement(instance22result, list21);
    list23 <- new appendElement(instance23result, list22);
    list24 <- new appendElement(instance24result, list23);
    list25 <- new appendElement(instance25result, list24);
    list26 <- new appendElement(instance26result, list25);
    list27 <- new appendElement(instance27result, list26);
    list28 <- new appendElement(instance28result, list27);
    list29 <- new appendElement(instance29result, list28);
    list30 <- new appendElement(instance30result, list29);
    list31 <- new appendElement(instance31result, list30);
    list32 <- new appendElement(instance32result, list31);
    list33 <- new appendElement(instance33result, list32);
    list34 <- new appendElement(instance34result, list33);
    list35 <- new appendElement(instance35result, list34);
    list36 <- new appendElement(instance36result, list35);
    list37 <- new appendElement(instance37result, list36);
    list38 <- new appendElement(instance38result, list37);
    list39 <- new appendElement(instance39result, list38);
    list40 <- new appendElement(instance40result, list39);
    list41 <- new appendElement(instance41result, list40);
    list42 <- new appendElement(instance42result, list41);
    list43 <- new appendElement(instance43result, list42);
    list44 <- new appendElement(instance44result, list43);
    list45 <- new appendElement(instance45result, list44);
    list46 <- new appendElement(instance46result, list45);
    list47 <- new appendElement(instance47result, list46);
    list48 <- new appendElement(instance48result, list47);
    list49 <- new appendElement(instance49result, list48);
    list50 <- new appendElement(instance50result, list49);

    // Forward the list result
    fwd self list50

///////// Natural numbers constants /////////

// 1 : S(0)
let nat1() : nat =
  t : 1 <- new close self;
  z  : nat <- new self.zero<t>;
  s0 : nat <- new self.succ<z>;
  fwd self s0

///////// Printing Helpers /////////

let consumeNat(n : nat) : 1 =
        case n ( zero<c> => print zero; wait c; close self
               | succ<c> => print succ; consumeNat(c))

let printNat(n : nat) : 1 =
          y <- new consumeNat(n);
          wait y;
          close self

let consumeList(l : listNat) : 1 =
        case l ( cons<c> => print _cons_;
                            <b, L2> <- recv c;
                            bConsume <- new consumeNat(b);
                            wait bConsume;
                            consumeList(L2)
               | nil<c>  => print _nil_;
                            wait c;
                            close self)

let printList(l : listNat) : 1 =
          y <- new consumeList(l);
          wait y;
          close self
