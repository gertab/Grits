// Doubles a number two times
// This program contains a type error

type nat = +{zero : 1, succ : nat}

let double(x : nat) : nat =
    case x (
          zero<x'> => self.zero<x'>
        | succ<x'> => h <- new double(x');
                      // d : nat <- new d.succ<h>; (valid d)
                      d : 1 <- new close self; //changed type of d to 1
                      self.succ<d> // d has a wrong type
    )

// Initiate execution
prc[d0] : nat = // produces the natural number one, i.e. succ(zero)
    t : 1 <- new close t;
    z  : nat <- new z.zero<t>;
    self.succ<z>
prc[b] : nat = 
    d1 <- new double(d0);
    d2 <- new double(d1); // double used twice
    fwd self d2
prc[c] : 1 = printNat(b)

// Print result
let printNat(n : nat) : 1 = 
          y <- new consumeNat(n); 
          wait y;
          close self

let consumeNat(n : nat) : 1 = 
        case n ( zero<c> => print zero; wait c; close self
               | succ<c> => print succ; consumeNat(c))

