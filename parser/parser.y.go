// Code generated by goyacc -p phi -o parser/parser.y.go parser/parser.y. DO NOT EDIT.

// Run this after each change:
// goyacc -p phi -o parser/parser.y.go parser/parser.y
//
//line parser/parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:4

import (
	"io"
	"phi/process"
	"phi/types"
)

//line parser/parser.y:14
type phiSymType struct {
	yys         int
	strval      string
	common_type unexpandedProcessOrFunction
	items       []unexpandedProcessOrFunction
	name        process.Name
	names       []process.Name
	form        process.Form
	branches    []*process.BranchForm
}

const LABEL = 57346
const LEFT_ARROW = 57347
const RIGHT_ARROW = 57348
const EQUALS = 57349
const DOT = 57350
const SEQUENCE = 57351
const COLON = 57352
const COMMA = 57353
const LPAREN = 57354
const RPAREN = 57355
const LSBRACK = 57356
const RSBRACK = 57357
const LANGLE = 57358
const RANGLE = 57359
const PIPE = 57360
const SEND = 57361
const RECEIVE = 57362
const CASE = 57363
const CLOSE = 57364
const WAIT = 57365
const CAST = 57366
const SHIFT = 57367
const ACCEPT = 57368
const ACQUIRE = 57369
const DETACH = 57370
const RELEASE = 57371
const DROP = 57372
const SPLIT = 57373
const PUSH = 57374
const NEW = 57375
const SNEW = 57376
const TYPE = 57377
const LET = 57378
const IN = 57379
const END = 57380
const SPRC = 57381
const PRC = 57382
const FORWARD = 57383
const SELF = 57384
const PRINT = 57385
const POL_POSITIVE = 57386
const POL_NEGATIVE = 57387

var phiToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LABEL",
	"LEFT_ARROW",
	"RIGHT_ARROW",
	"EQUALS",
	"DOT",
	"SEQUENCE",
	"COLON",
	"COMMA",
	"LPAREN",
	"RPAREN",
	"LSBRACK",
	"RSBRACK",
	"LANGLE",
	"RANGLE",
	"PIPE",
	"SEND",
	"RECEIVE",
	"CASE",
	"CLOSE",
	"WAIT",
	"CAST",
	"SHIFT",
	"ACCEPT",
	"ACQUIRE",
	"DETACH",
	"RELEASE",
	"DROP",
	"SPLIT",
	"PUSH",
	"NEW",
	"SNEW",
	"TYPE",
	"LET",
	"IN",
	"END",
	"SPRC",
	"PRC",
	"FORWARD",
	"SELF",
	"PRINT",
	"POL_POSITIVE",
	"POL_NEGATIVE",
}

var phiStatenames = [...]string{}

const phiEofCode = 1
const phiErrCode = 2
const phiInitialStackSize = 16

//line parser/parser.y:147

// Parse is the entry point to the parser.
func Parse(r io.Reader) (allEnvironment, error) {
	l := newLexer(r)
	phiParse(l)
	allEnvironment := allEnvironment{}
	select {
	case err := <-l.Errors:
		return allEnvironment, err
	default:
		// allEnvironment := l
		allEnvironment.procsAndFuns = l.processesOrFunctionsRes
		return allEnvironment, nil
	}
}

//line yacctab:1
var phiExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const phiPrivate = 57344

const phiLast = 159

var phiAct = [...]uint8{
	7, 55, 67, 105, 47, 30, 23, 24, 19, 27,
	3, 63, 32, 33, 34, 35, 22, 21, 62, 28,
	115, 20, 114, 45, 46, 125, 83, 106, 107, 111,
	50, 84, 52, 104, 95, 89, 78, 110, 85, 61,
	56, 54, 31, 59, 60, 42, 18, 74, 64, 4,
	68, 69, 68, 71, 70, 73, 29, 39, 68, 109,
	76, 108, 79, 92, 72, 36, 37, 38, 88, 86,
	81, 80, 57, 51, 49, 48, 56, 91, 93, 87,
	77, 75, 43, 90, 129, 19, 100, 128, 56, 101,
	103, 96, 97, 98, 120, 117, 116, 6, 82, 53,
	5, 102, 8, 11, 12, 13, 113, 26, 58, 130,
	25, 118, 119, 94, 112, 121, 122, 19, 99, 66,
	44, 41, 40, 18, 14, 9, 10, 123, 124, 6,
	126, 127, 5, 2, 8, 11, 12, 13, 1, 131,
	132, 133, 65, 17, 16, 15, 0, 0, 22, 21,
	0, 0, 0, 20, 0, 18, 14, 9, 10,
}

var phiPact = [...]int16{
	113, -1000, -1000, -1000, -1000, 4, 4, 102, 4, 15,
	1, 4, 4, 4, 4, -19, -19, -19, -1000, -1000,
	43, 118, 117, 29, 71, 116, -21, 63, 62, 4,
	61, 4, -1000, 90, 25, -1000, -1000, -1000, -1000, 4,
	60, 101, 4, 4, 23, -15, -22, 4, 115, 4,
	4, 4, 4, 81, 4, 32, 70, 4, -1000, 69,
	19, 4, 59, 58, 89, 13, 22, 56, 68, -1000,
	55, -1000, -1000, 18, 73, 4, 50, 4, 108, 17,
	81, 81, 81, -1000, 114, 4, -1000, 4, -1000, -1000,
	81, -1000, 83, 16, -17, -1000, 48, 46, -1000, 21,
	12, -1000, -1000, 81, -1000, 4, -9, -11, 87, 86,
	4, 106, -1000, 85, 4, 4, 81, 81, 8, 81,
	81, 78, 75, -1000, -1000, 103, -1000, -1000, 81, 81,
	81, -1000, -1000, -1000,
}

var phiPgo = [...]uint8{
	0, 49, 145, 144, 143, 10, 0, 1, 2, 142,
	138, 133,
}

var phiR1 = [...]int8{
	0, 10, 11, 11, 1, 1, 1, 1, 1, 1,
	2, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 9, 9,
	9, 7, 7, 8, 8, 8, 6, 6, 3, 4,
}

var phiR2 = [...]int8{
	0, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	6, 7, 10, 6, 5, 9, 9, 5, 5, 2,
	4, 4, 11, 11, 4, 5, 6, 2, 0, 6,
	8, 1, 3, 0, 1, 3, 1, 1, 7, 3,
}

var phiChk = [...]int16{
	-1000, -10, -11, -5, -1, 19, 16, -6, 21, 44,
	45, 22, 23, 24, 43, -2, -3, -4, 42, 4,
	40, 36, 35, -6, -6, 8, 5, -6, 4, 41,
	4, 41, -6, -6, -6, -6, -1, -1, -1, 14,
	4, 4, 16, 11, 4, 44, 45, 25, 12, 12,
	-6, 12, -6, 9, 16, -7, -6, 12, 7, -6,
	-6, 16, 33, 33, -6, -9, 4, -8, -6, -6,
	-8, -6, -5, -6, 15, 11, -8, 11, 17, -6,
	12, 12, 9, 13, 18, 16, 13, 11, 13, 17,
	10, -7, 13, -6, 5, 17, -5, -5, -5, 4,
	-6, -7, -5, 7, 17, 20, 44, 45, 13, 13,
	16, 17, -5, -6, 31, 31, 9, 9, -6, 6,
	9, -6, -6, -5, -5, 17, -5, -5, 9, 9,
	6, -5, -5, -5,
}

var phiDef = [...]int8{
	0, -2, 1, 2, 3, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4, 6, 8, 36, 37,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 19, 0, 0, 27, 5, 7, 9, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 28, 33,
	0, 33, 0, 0, 0, 0, 31, 33, 39, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 34, 20,
	0, 21, 24, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 14, 0, 0, 17, 0, 18, 25,
	0, 32, 0, 0, 0, 13, 0, 0, 26, 0,
	0, 35, 10, 0, 11, 0, 0, 0, 0, 0,
	0, 0, 38, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 15, 16, 0, 29, 12, 0, 0,
	0, 22, 23, 30,
}

var phiTok1 = [...]int8{
	1,
}

var phiTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45,
}

var phiTok3 = [...]int8{
	0,
}

var phiErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	phiDebug        = 0
	phiErrorVerbose = false
)

type phiLexer interface {
	Lex(lval *phiSymType) int
	Error(s string)
}

type phiParser interface {
	Parse(phiLexer) int
	Lookahead() int
}

type phiParserImpl struct {
	lval  phiSymType
	stack [phiInitialStackSize]phiSymType
	char  int
}

func (p *phiParserImpl) Lookahead() int {
	return p.char
}

func phiNewParser() phiParser {
	return &phiParserImpl{}
}

const phiFlag = -1000

func phiTokname(c int) string {
	if c >= 1 && c-1 < len(phiToknames) {
		if phiToknames[c-1] != "" {
			return phiToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func phiStatname(s int) string {
	if s >= 0 && s < len(phiStatenames) {
		if phiStatenames[s] != "" {
			return phiStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func phiErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !phiErrorVerbose {
		return "syntax error"
	}

	for _, e := range phiErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + phiTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(phiPact[state])
	for tok := TOKSTART; tok-1 < len(phiToknames); tok++ {
		if n := base + tok; n >= 0 && n < phiLast && int(phiChk[int(phiAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if phiDef[state] == -2 {
		i := 0
		for phiExca[i] != -1 || int(phiExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; phiExca[i] >= 0; i += 2 {
			tok := int(phiExca[i])
			if tok < TOKSTART || phiExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if phiExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += phiTokname(tok)
	}
	return res
}

func philex1(lex phiLexer, lval *phiSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(phiTok1[0])
		goto out
	}
	if char < len(phiTok1) {
		token = int(phiTok1[char])
		goto out
	}
	if char >= phiPrivate {
		if char < phiPrivate+len(phiTok2) {
			token = int(phiTok2[char-phiPrivate])
			goto out
		}
	}
	for i := 0; i < len(phiTok3); i += 2 {
		token = int(phiTok3[i+0])
		if token == char {
			token = int(phiTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(phiTok2[1]) /* unknown char */
	}
	if phiDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", phiTokname(token), uint(char))
	}
	return char, token
}

func phiParse(philex phiLexer) int {
	return phiNewParser().Parse(philex)
}

func (phircvr *phiParserImpl) Parse(philex phiLexer) int {
	var phin int
	var phiVAL phiSymType
	var phiDollar []phiSymType
	_ = phiDollar // silence set and not used
	phiS := phircvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	phistate := 0
	phircvr.char = -1
	phitoken := -1 // phircvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		phistate = -1
		phircvr.char = -1
		phitoken = -1
	}()
	phip := -1
	goto phistack

ret0:
	return 0

ret1:
	return 1

phistack:
	/* put a state and value onto the stack */
	if phiDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", phiTokname(phitoken), phiStatname(phistate))
	}

	phip++
	if phip >= len(phiS) {
		nyys := make([]phiSymType, len(phiS)*2)
		copy(nyys, phiS)
		phiS = nyys
	}
	phiS[phip] = phiVAL
	phiS[phip].yys = phistate

phinewstate:
	phin = int(phiPact[phistate])
	if phin <= phiFlag {
		goto phidefault /* simple state */
	}
	if phircvr.char < 0 {
		phircvr.char, phitoken = philex1(philex, &phircvr.lval)
	}
	phin += phitoken
	if phin < 0 || phin >= phiLast {
		goto phidefault
	}
	phin = int(phiAct[phin])
	if int(phiChk[phin]) == phitoken { /* valid shift */
		phircvr.char = -1
		phitoken = -1
		phiVAL = phircvr.lval
		phistate = phin
		if Errflag > 0 {
			Errflag--
		}
		goto phistack
	}

phidefault:
	/* default state action */
	phin = int(phiDef[phistate])
	if phin == -2 {
		if phircvr.char < 0 {
			phircvr.char, phitoken = philex1(philex, &phircvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if phiExca[xi+0] == -1 && int(phiExca[xi+1]) == phistate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			phin = int(phiExca[xi+0])
			if phin < 0 || phin == phitoken {
				break
			}
		}
		phin = int(phiExca[xi+1])
		if phin < 0 {
			goto ret0
		}
	}
	if phin == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			philex.Error(phiErrorMessage(phistate, phitoken))
			Nerrs++
			if phiDebug >= 1 {
				__yyfmt__.Printf("%s", phiStatname(phistate))
				__yyfmt__.Printf(" saw %s\n", phiTokname(phitoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for phip >= 0 {
				phin = int(phiPact[phiS[phip].yys]) + phiErrCode
				if phin >= 0 && phin < phiLast {
					phistate = int(phiAct[phin]) /* simulate a shift of "error" */
					if int(phiChk[phistate]) == phiErrCode {
						goto phistack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if phiDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", phiS[phip].yys)
				}
				phip--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if phiDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", phiTokname(phitoken))
			}
			if phitoken == phiEofCode {
				goto ret1
			}
			phircvr.char = -1
			phitoken = -1
			goto phinewstate /* try again in the same state */
		}
	}

	/* reduction by production phin */
	if phiDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", phin, phiStatname(phistate))
	}

	phint := phin
	phipt := phip
	_ = phipt // guard against "declared and not used"

	phip -= int(phiR2[phin])
	// phip is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if phip+1 >= len(phiS) {
		nyys := make([]phiSymType, len(phiS)*2)
		copy(nyys, phiS)
		phiS = nyys
	}
	phiVAL = phiS[phip+1]

	/* consult goto table to find next state */
	phin = int(phiR1[phin])
	phig := int(phiPgo[phin])
	phij := phig + phiS[phip].yys + 1

	if phij >= phiLast {
		phistate = int(phiAct[phig])
	} else {
		phistate = int(phiAct[phij])
		if int(phiChk[phistate]) != -phin {
			phistate = int(phiAct[phig])
		}
	}
	// dummy call; replaced with literal code
	switch phint {

	case 1:
		phiDollar = phiS[phipt-1 : phipt+1]
//line parser/parser.y:41
		{
		}
	case 2:
		phiDollar = phiS[phipt-1 : phipt+1]
//line parser/parser.y:46
		{
			philex.(*lexer).processesOrFunctionsRes = append(philex.(*lexer).processesOrFunctionsRes, unexpandedProcessOrFunction{kind: PROCESS, proc: incompleteProcess{Body: phiDollar[1].form, Providers: []process.Name{{Ident: "root", IsSelf: false}}}})
		}
	case 3:
		phiDollar = phiS[phipt-1 : phipt+1]
//line parser/parser.y:50
		{
			philex.(*lexer).processesOrFunctionsRes = phiDollar[1].items
		}
	case 4:
		phiDollar = phiS[phipt-1 : phipt+1]
//line parser/parser.y:56
		{
			phiVAL.items = []unexpandedProcessOrFunction{phiDollar[1].common_type}
		}
	case 5:
		phiDollar = phiS[phipt-2 : phipt+1]
//line parser/parser.y:57
		{
			phiVAL.items = append([]unexpandedProcessOrFunction{phiDollar[1].common_type}, phiDollar[2].items...)
		}
	case 6:
		phiDollar = phiS[phipt-1 : phipt+1]
//line parser/parser.y:58
		{
			phiVAL.items = []unexpandedProcessOrFunction{phiDollar[1].common_type}
		}
	case 7:
		phiDollar = phiS[phipt-2 : phipt+1]
//line parser/parser.y:59
		{
			phiVAL.items = append([]unexpandedProcessOrFunction{phiDollar[1].common_type}, phiDollar[2].items...)
		}
	case 8:
		phiDollar = phiS[phipt-1 : phipt+1]
//line parser/parser.y:60
		{
			phiVAL.items = []unexpandedProcessOrFunction{phiDollar[1].common_type}
		}
	case 9:
		phiDollar = phiS[phipt-2 : phipt+1]
//line parser/parser.y:61
		{
			phiVAL.items = append([]unexpandedProcessOrFunction{phiDollar[1].common_type}, phiDollar[2].items...)
		}
	case 10:
		phiDollar = phiS[phipt-6 : phipt+1]
//line parser/parser.y:66
		{
			phiVAL.common_type = unexpandedProcessOrFunction{kind: PROCESS, proc: incompleteProcess{Body: phiDollar[6].form, Providers: phiDollar[3].names}}
		}
	case 11:
		phiDollar = phiS[phipt-7 : phipt+1]
//line parser/parser.y:72
		{
			phiVAL.form = process.NewSend(phiDollar[2].name, phiDollar[4].name, phiDollar[6].name)
		}
	case 12:
		phiDollar = phiS[phipt-10 : phipt+1]
//line parser/parser.y:77
		{
			phiVAL.form = process.NewReceive(phiDollar[2].name, phiDollar[4].name, phiDollar[8].name, phiDollar[10].form)
		}
	case 13:
		phiDollar = phiS[phipt-6 : phipt+1]
//line parser/parser.y:79
		{
			phiVAL.form = process.NewSelect(phiDollar[1].name, process.Label{L: phiDollar[3].strval}, phiDollar[5].name)
		}
	case 14:
		phiDollar = phiS[phipt-5 : phipt+1]
//line parser/parser.y:81
		{
			phiVAL.form = process.NewCase(phiDollar[2].name, phiDollar[4].branches)
		}
	case 15:
		phiDollar = phiS[phipt-9 : phipt+1]
//line parser/parser.y:86
		{
			phiVAL.form = process.NewNew(phiDollar[1].name, phiDollar[6].form, phiDollar[9].form, process.POSITIVE)
		}
	case 16:
		phiDollar = phiS[phipt-9 : phipt+1]
//line parser/parser.y:88
		{
			phiVAL.form = process.NewNew(phiDollar[1].name, phiDollar[6].form, phiDollar[9].form, process.NEGATIVE)
		}
	case 17:
		phiDollar = phiS[phipt-5 : phipt+1]
//line parser/parser.y:90
		{
			phiVAL.form = process.NewCall(phiDollar[2].strval, phiDollar[4].names, process.POSITIVE)
		}
	case 18:
		phiDollar = phiS[phipt-5 : phipt+1]
//line parser/parser.y:92
		{
			phiVAL.form = process.NewCall(phiDollar[2].strval, phiDollar[4].names, process.NEGATIVE)
		}
	case 19:
		phiDollar = phiS[phipt-2 : phipt+1]
//line parser/parser.y:94
		{
			phiVAL.form = process.NewClose(phiDollar[2].name)
		}
	case 20:
		phiDollar = phiS[phipt-4 : phipt+1]
//line parser/parser.y:99
		{
			phiVAL.form = process.NewForward(phiDollar[3].name, phiDollar[4].name, process.POSITIVE)
		}
	case 21:
		phiDollar = phiS[phipt-4 : phipt+1]
//line parser/parser.y:101
		{
			phiVAL.form = process.NewForward(phiDollar[3].name, phiDollar[4].name, process.NEGATIVE)
		}
	case 22:
		phiDollar = phiS[phipt-11 : phipt+1]
//line parser/parser.y:106
		{
			phiVAL.form = process.NewSplit(phiDollar[2].name, phiDollar[4].name, phiDollar[9].name, phiDollar[11].form, process.POSITIVE)
		}
	case 23:
		phiDollar = phiS[phipt-11 : phipt+1]
//line parser/parser.y:108
		{
			phiVAL.form = process.NewSplit(phiDollar[2].name, phiDollar[4].name, phiDollar[9].name, phiDollar[11].form, process.NEGATIVE)
		}
	case 24:
		phiDollar = phiS[phipt-4 : phipt+1]
//line parser/parser.y:110
		{
			phiVAL.form = process.NewWait(phiDollar[2].name, phiDollar[4].form)
		}
	case 25:
		phiDollar = phiS[phipt-5 : phipt+1]
//line parser/parser.y:112
		{
			phiVAL.form = process.NewCast(phiDollar[2].name, phiDollar[4].name)
		}
	case 26:
		phiDollar = phiS[phipt-6 : phipt+1]
//line parser/parser.y:114
		{
			phiVAL.form = process.NewShift(phiDollar[1].name, phiDollar[4].name, phiDollar[6].form)
		}
	case 27:
		phiDollar = phiS[phipt-2 : phipt+1]
//line parser/parser.y:124
		{
			phiVAL.form = process.NewPrint(phiDollar[2].name)
		}
	case 28:
		phiDollar = phiS[phipt-0 : phipt+1]
//line parser/parser.y:126
		{
			phiVAL.branches = nil
		}
	case 29:
		phiDollar = phiS[phipt-6 : phipt+1]
//line parser/parser.y:127
		{
			phiVAL.branches = []*process.BranchForm{process.NewBranch(process.Label{L: phiDollar[1].strval}, phiDollar[3].name, phiDollar[6].form)}
		}
	case 30:
		phiDollar = phiS[phipt-8 : phipt+1]
//line parser/parser.y:128
		{
			phiVAL.branches = append(phiDollar[1].branches, process.NewBranch(process.Label{L: phiDollar[3].strval}, phiDollar[5].name, phiDollar[8].form))
		}
	case 31:
		phiDollar = phiS[phipt-1 : phipt+1]
//line parser/parser.y:131
		{
			phiVAL.names = []process.Name{phiDollar[1].name}
		}
	case 32:
		phiDollar = phiS[phipt-3 : phipt+1]
//line parser/parser.y:132
		{
			phiVAL.names = append(phiDollar[3].names, phiDollar[1].name)
		}
	case 33:
		phiDollar = phiS[phipt-0 : phipt+1]
//line parser/parser.y:134
		{
			phiVAL.names = nil
		}
	case 34:
		phiDollar = phiS[phipt-1 : phipt+1]
//line parser/parser.y:135
		{
			phiVAL.names = []process.Name{phiDollar[1].name}
		}
	case 35:
		phiDollar = phiS[phipt-3 : phipt+1]
//line parser/parser.y:136
		{
			phiVAL.names = append(phiDollar[3].names, phiDollar[1].name)
		}
	case 36:
		phiDollar = phiS[phipt-1 : phipt+1]
//line parser/parser.y:138
		{
			phiVAL.name = process.Name{IsSelf: true}
		}
	case 37:
		phiDollar = phiS[phipt-1 : phipt+1]
//line parser/parser.y:139
		{
			phiVAL.name = process.Name{Ident: phiDollar[1].strval, IsSelf: false}
		}
	case 38:
		phiDollar = phiS[phipt-7 : phipt+1]
//line parser/parser.y:142
		{
			phiVAL.common_type = unexpandedProcessOrFunction{kind: FUNCTION_DEF, function: process.FunctionDefinition{FunctionName: phiDollar[2].strval, Parameters: phiDollar[4].names, Body: phiDollar[7].form}}
		}
	case 39:
		phiDollar = phiS[phipt-3 : phipt+1]
//line parser/parser.y:145
		{
			phiVAL.common_type = unexpandedProcessOrFunction{kind: TYPE_DEF, session_type: types.SessionType{}}
		}
	}
	goto phistack /* stack new state and value */
}
