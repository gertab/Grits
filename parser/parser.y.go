// Code generated by goyacc -p phi -o parser/parser.y.go parser/parser.y. DO NOT EDIT.

// Run this after each change:
// goyacc -p phi -o parser/parser.y.go parser/parser.y
//
//line parser/parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:4

import (
	"io"
	"phi/process"
)

//line parser/parser.y:13
type phiSymType struct {
	yys       int
	strval    string
	proc      incompleteProcess
	procs     []incompleteProcess
	functions []process.FunctionDefinition
	name      process.Name
	names     []process.Name
	form      process.Form
	branches  []*process.BranchForm
}

const LABEL = 57346
const LEFT_ARROW = 57347
const RIGHT_ARROW = 57348
const EQUALS = 57349
const DOT = 57350
const SEQUENCE = 57351
const COLON = 57352
const COMMA = 57353
const LPAREN = 57354
const RPAREN = 57355
const LSBRACK = 57356
const RSBRACK = 57357
const LANGLE = 57358
const RANGLE = 57359
const PIPE = 57360
const SEND = 57361
const RECEIVE = 57362
const CASE = 57363
const CLOSE = 57364
const WAIT = 57365
const CAST = 57366
const SHIFT = 57367
const ACCEPT = 57368
const ACQUIRE = 57369
const DETACH = 57370
const RELEASE = 57371
const DROP = 57372
const SPLIT = 57373
const PUSH = 57374
const NEW = 57375
const SNEW = 57376
const LET = 57377
const IN = 57378
const END = 57379
const SPRC = 57380
const PRC = 57381
const FORWARD = 57382
const SELF = 57383
const PRINT = 57384
const POL_POSITIVE = 57385
const POL_NEGATIVE = 57386

var phiToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LABEL",
	"LEFT_ARROW",
	"RIGHT_ARROW",
	"EQUALS",
	"DOT",
	"SEQUENCE",
	"COLON",
	"COMMA",
	"LPAREN",
	"RPAREN",
	"LSBRACK",
	"RSBRACK",
	"LANGLE",
	"RANGLE",
	"PIPE",
	"SEND",
	"RECEIVE",
	"CASE",
	"CLOSE",
	"WAIT",
	"CAST",
	"SHIFT",
	"ACCEPT",
	"ACQUIRE",
	"DETACH",
	"RELEASE",
	"DROP",
	"SPLIT",
	"PUSH",
	"NEW",
	"SNEW",
	"LET",
	"IN",
	"END",
	"SPRC",
	"PRC",
	"FORWARD",
	"SELF",
	"PRINT",
	"POL_POSITIVE",
	"POL_NEGATIVE",
}

var phiStatenames = [...]string{}

const phiEofCode = 1
const phiErrCode = 2
const phiInitialStackSize = 16

//line parser/parser.y:136

// Parse is the entry point to the parser.
func Parse(r io.Reader) (unexpandedProcesses, error) {
	l := newLexer(r)
	phiParse(l)
	select {
	case err := <-l.Errors:
		return unexpandedProcesses{}, err
	default:
		unexpandedProcesses := unexpandedProcesses{procs: l.processesRes, functions: l.functionDefinitionsRes}
		return unexpandedProcesses, nil
	}
}

//line yacctab:1
var phiExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const phiPrivate = 57344

const phiLast = 171

var phiAct = [...]uint8{
	3, 20, 42, 43, 17, 50, 102, 29, 17, 19,
	18, 73, 17, 67, 37, 60, 59, 107, 27, 112,
	7, 17, 111, 6, 122, 9, 12, 13, 108, 103,
	104, 83, 81, 7, 36, 101, 6, 82, 9, 12,
	13, 16, 52, 30, 55, 16, 14, 10, 11, 16,
	69, 63, 5, 66, 28, 19, 18, 8, 16, 14,
	10, 11, 4, 93, 22, 23, 77, 26, 58, 39,
	31, 32, 33, 17, 17, 89, 72, 87, 34, 70,
	94, 95, 64, 54, 80, 35, 46, 98, 48, 99,
	106, 100, 105, 51, 51, 85, 51, 56, 57, 84,
	53, 75, 109, 51, 65, 51, 68, 79, 47, 45,
	16, 16, 44, 38, 120, 121, 78, 123, 124, 76,
	71, 40, 88, 86, 126, 125, 128, 129, 130, 51,
	117, 114, 113, 49, 91, 25, 90, 127, 24, 74,
	116, 97, 92, 21, 96, 62, 41, 2, 1, 61,
	15, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 0, 0, 0, 115, 0, 0, 0, 118,
	119,
}

var phiPact = [...]int16{
	17, -1000, -1000, -1000, -1000, 139, 8, 8, 130, 8,
	14, 3, 8, 8, 8, -29, -1000, -1000, 71, 20,
	-22, 101, 53, 110, 142, -41, 100, 97, 8, 96,
	8, -1000, 124, -1000, -1000, 8, 8, -29, 70, 8,
	8, 52, -17, -18, 141, 69, 8, 0, 8, 4,
	64, 109, 61, -26, 132, 88, 108, 49, 8, 95,
	72, 19, 15, 86, -1000, -1000, 82, -1000, -1000, -1000,
	113, 8, 112, -1000, 4, 129, 8, 137, 46, 4,
	4, -1000, 140, 8, -1000, -1000, 4, -1000, 4, -1000,
	4, 18, -14, -1000, 79, 77, 1, 11, -1000, -1000,
	139, -1000, 8, -9, -12, 123, 122, 8, 134, -1000,
	121, 8, 8, 4, 4, 7, 4, 4, 116, 115,
	-1000, -1000, 131, -1000, -1000, 4, 4, 4, -1000, -1000,
	-1000,
}

var phiPgo = [...]uint8{
	0, 62, 0, 1, 57, 5, 150, 149, 148, 147,
}

var phiR1 = [...]int8{
	0, 8, 9, 9, 9, 1, 1, 6, 6, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 7, 7, 7, 5,
	5, 4, 4, 3, 3, 3,
}

var phiR2 = [...]int8{
	0, 1, 1, 1, 5, 2, 1, 6, 6, 7,
	10, 6, 5, 9, 9, 5, 4, 5, 4, 2,
	4, 4, 11, 11, 4, 2, 0, 6, 8, 1,
	3, 1, 1, 0, 5, 7,
}

var phiChk = [...]int16{
	-1000, -8, -9, -2, -1, 35, 19, 16, -4, 21,
	43, 44, 22, 23, 42, -6, 41, 4, 39, 38,
	-3, 4, -4, -4, 8, 5, -4, 4, 40, 4,
	40, -4, -4, -4, -1, 14, 14, 36, 12, 16,
	11, 4, 43, 44, 12, 12, -4, 12, -4, 9,
	-5, -4, -5, -1, 13, -5, -4, -4, 16, 33,
	33, -7, 4, -5, 13, -4, -5, 13, -4, -2,
	15, 11, 15, 37, 7, 13, 11, 17, -4, 12,
	12, 13, 18, 16, 13, 13, 10, -5, 10, -2,
	7, -4, 5, 17, -2, -2, 4, -4, -2, -2,
	-2, 17, 20, 43, 44, 13, 13, 16, 17, -3,
	-4, 31, 31, 9, 9, -4, 6, 9, -4, -4,
	-2, -2, 17, -2, -2, 9, 9, 6, -2, -2,
	-2,
}

var phiDef = [...]int8{
	0, -2, 1, 2, 3, 33, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 6, 31, 32, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 19, 0, 25, 5, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 26, 0, 0, 0, 0, 0,
	0, 29, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 20, 0, 18, 21, 24,
	0, 0, 0, 4, 0, 0, 0, 0, 0, 0,
	0, 12, 0, 0, 15, 17, 0, 30, 0, 34,
	0, 0, 0, 11, 0, 0, 0, 0, 7, 8,
	33, 9, 0, 0, 0, 0, 0, 0, 0, 35,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	13, 14, 0, 27, 10, 0, 0, 0, 22, 23,
	28,
}

var phiTok1 = [...]int8{
	1,
}

var phiTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44,
}

var phiTok3 = [...]int8{
	0,
}

var phiErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	phiDebug        = 0
	phiErrorVerbose = false
)

type phiLexer interface {
	Lex(lval *phiSymType) int
	Error(s string)
}

type phiParser interface {
	Parse(phiLexer) int
	Lookahead() int
}

type phiParserImpl struct {
	lval  phiSymType
	stack [phiInitialStackSize]phiSymType
	char  int
}

func (p *phiParserImpl) Lookahead() int {
	return p.char
}

func phiNewParser() phiParser {
	return &phiParserImpl{}
}

const phiFlag = -1000

func phiTokname(c int) string {
	if c >= 1 && c-1 < len(phiToknames) {
		if phiToknames[c-1] != "" {
			return phiToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func phiStatname(s int) string {
	if s >= 0 && s < len(phiStatenames) {
		if phiStatenames[s] != "" {
			return phiStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func phiErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !phiErrorVerbose {
		return "syntax error"
	}

	for _, e := range phiErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + phiTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(phiPact[state])
	for tok := TOKSTART; tok-1 < len(phiToknames); tok++ {
		if n := base + tok; n >= 0 && n < phiLast && int(phiChk[int(phiAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if phiDef[state] == -2 {
		i := 0
		for phiExca[i] != -1 || int(phiExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; phiExca[i] >= 0; i += 2 {
			tok := int(phiExca[i])
			if tok < TOKSTART || phiExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if phiExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += phiTokname(tok)
	}
	return res
}

func philex1(lex phiLexer, lval *phiSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(phiTok1[0])
		goto out
	}
	if char < len(phiTok1) {
		token = int(phiTok1[char])
		goto out
	}
	if char >= phiPrivate {
		if char < phiPrivate+len(phiTok2) {
			token = int(phiTok2[char-phiPrivate])
			goto out
		}
	}
	for i := 0; i < len(phiTok3); i += 2 {
		token = int(phiTok3[i+0])
		if token == char {
			token = int(phiTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(phiTok2[1]) /* unknown char */
	}
	if phiDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", phiTokname(token), uint(char))
	}
	return char, token
}

func phiParse(philex phiLexer) int {
	return phiNewParser().Parse(philex)
}

func (phircvr *phiParserImpl) Parse(philex phiLexer) int {
	var phin int
	var phiVAL phiSymType
	var phiDollar []phiSymType
	_ = phiDollar // silence set and not used
	phiS := phircvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	phistate := 0
	phircvr.char = -1
	phitoken := -1 // phircvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		phistate = -1
		phircvr.char = -1
		phitoken = -1
	}()
	phip := -1
	goto phistack

ret0:
	return 0

ret1:
	return 1

phistack:
	/* put a state and value onto the stack */
	if phiDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", phiTokname(phitoken), phiStatname(phistate))
	}

	phip++
	if phip >= len(phiS) {
		nyys := make([]phiSymType, len(phiS)*2)
		copy(nyys, phiS)
		phiS = nyys
	}
	phiS[phip] = phiVAL
	phiS[phip].yys = phistate

phinewstate:
	phin = int(phiPact[phistate])
	if phin <= phiFlag {
		goto phidefault /* simple state */
	}
	if phircvr.char < 0 {
		phircvr.char, phitoken = philex1(philex, &phircvr.lval)
	}
	phin += phitoken
	if phin < 0 || phin >= phiLast {
		goto phidefault
	}
	phin = int(phiAct[phin])
	if int(phiChk[phin]) == phitoken { /* valid shift */
		phircvr.char = -1
		phitoken = -1
		phiVAL = phircvr.lval
		phistate = phin
		if Errflag > 0 {
			Errflag--
		}
		goto phistack
	}

phidefault:
	/* default state action */
	phin = int(phiDef[phistate])
	if phin == -2 {
		if phircvr.char < 0 {
			phircvr.char, phitoken = philex1(philex, &phircvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if phiExca[xi+0] == -1 && int(phiExca[xi+1]) == phistate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			phin = int(phiExca[xi+0])
			if phin < 0 || phin == phitoken {
				break
			}
		}
		phin = int(phiExca[xi+1])
		if phin < 0 {
			goto ret0
		}
	}
	if phin == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			philex.Error(phiErrorMessage(phistate, phitoken))
			Nerrs++
			if phiDebug >= 1 {
				__yyfmt__.Printf("%s", phiStatname(phistate))
				__yyfmt__.Printf(" saw %s\n", phiTokname(phitoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for phip >= 0 {
				phin = int(phiPact[phiS[phip].yys]) + phiErrCode
				if phin >= 0 && phin < phiLast {
					phistate = int(phiAct[phin]) /* simulate a shift of "error" */
					if int(phiChk[phistate]) == phiErrCode {
						goto phistack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if phiDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", phiS[phip].yys)
				}
				phip--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if phiDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", phiTokname(phitoken))
			}
			if phitoken == phiEofCode {
				goto ret1
			}
			phircvr.char = -1
			phitoken = -1
			goto phinewstate /* try again in the same state */
		}
	}

	/* reduction by production phin */
	if phiDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", phin, phiStatname(phistate))
	}

	phint := phin
	phipt := phip
	_ = phipt // guard against "declared and not used"

	phip -= int(phiR2[phin])
	// phip is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if phip+1 >= len(phiS) {
		nyys := make([]phiSymType, len(phiS)*2)
		copy(nyys, phiS)
		phiS = nyys
	}
	phiVAL = phiS[phip+1]

	/* consult goto table to find next state */
	phin = int(phiR1[phin])
	phig := int(phiPgo[phin])
	phij := phig + phiS[phip].yys + 1

	if phij >= phiLast {
		phistate = int(phiAct[phig])
	} else {
		phistate = int(phiAct[phij])
		if int(phiChk[phistate]) != -phin {
			phistate = int(phiAct[phig])
		}
	}
	// dummy call; replaced with literal code
	switch phint {

	case 1:
		phiDollar = phiS[phipt-1 : phipt+1]
//line parser/parser.y:39
		{
		}
	case 2:
		phiDollar = phiS[phipt-1 : phipt+1]
//line parser/parser.y:44
		{
			philex.(*lexer).processesRes = append(philex.(*lexer).processesRes, incompleteProcess{Body: phiDollar[1].form, Providers: []process.Name{{Ident: "root", IsSelf: false}}})
		}
	case 3:
		phiDollar = phiS[phipt-1 : phipt+1]
//line parser/parser.y:48
		{
			philex.(*lexer).processesRes = phiDollar[1].procs
		}
	case 4:
		phiDollar = phiS[phipt-5 : phipt+1]
//line parser/parser.y:52
		{
			philex.(*lexer).processesRes = phiDollar[4].procs
			philex.(*lexer).functionDefinitionsRes = phiDollar[2].functions
		}
	case 5:
		phiDollar = phiS[phipt-2 : phipt+1]
//line parser/parser.y:57
		{
			phiVAL.procs = append([]incompleteProcess{phiDollar[1].proc}, phiDollar[2].procs...)
		}
	case 6:
		phiDollar = phiS[phipt-1 : phipt+1]
//line parser/parser.y:58
		{
			phiVAL.procs = []incompleteProcess{phiDollar[1].proc}
		}
	case 7:
		phiDollar = phiS[phipt-6 : phipt+1]
//line parser/parser.y:60
		{
			phiVAL.proc = incompleteProcess{Body: phiDollar[6].form, Providers: phiDollar[3].names}
		}
	case 8:
		phiDollar = phiS[phipt-6 : phipt+1]
//line parser/parser.y:61
		{
			phiVAL.proc = incompleteProcess{Body: phiDollar[6].form, Providers: phiDollar[3].names}
		}
	case 9:
		phiDollar = phiS[phipt-7 : phipt+1]
//line parser/parser.y:64
		{
			phiVAL.form = process.NewSend(phiDollar[2].name, phiDollar[4].name, phiDollar[6].name)
		}
	case 10:
		phiDollar = phiS[phipt-10 : phipt+1]
//line parser/parser.y:69
		{
			phiVAL.form = process.NewReceive(phiDollar[2].name, phiDollar[4].name, phiDollar[8].name, phiDollar[10].form)
		}
	case 11:
		phiDollar = phiS[phipt-6 : phipt+1]
//line parser/parser.y:71
		{
			phiVAL.form = process.NewSelect(phiDollar[1].name, process.Label{L: phiDollar[3].strval}, phiDollar[5].name)
		}
	case 12:
		phiDollar = phiS[phipt-5 : phipt+1]
//line parser/parser.y:73
		{
			phiVAL.form = process.NewCase(phiDollar[2].name, phiDollar[4].branches)
		}
	case 13:
		phiDollar = phiS[phipt-9 : phipt+1]
//line parser/parser.y:78
		{
			phiVAL.form = process.NewNew(phiDollar[1].name, phiDollar[6].form, phiDollar[9].form, process.POSITIVE)
		}
	case 14:
		phiDollar = phiS[phipt-9 : phipt+1]
//line parser/parser.y:80
		{
			phiVAL.form = process.NewNew(phiDollar[1].name, phiDollar[6].form, phiDollar[9].form, process.NEGATIVE)
		}
	case 15:
		phiDollar = phiS[phipt-5 : phipt+1]
//line parser/parser.y:82
		{
			phiVAL.form = process.NewCall(phiDollar[2].strval, phiDollar[4].names, process.POSITIVE)
		}
	case 16:
		phiDollar = phiS[phipt-4 : phipt+1]
//line parser/parser.y:84
		{
			phiVAL.form = process.NewCall(phiDollar[2].strval, []process.Name{}, process.POSITIVE)
		}
	case 17:
		phiDollar = phiS[phipt-5 : phipt+1]
//line parser/parser.y:86
		{
			phiVAL.form = process.NewCall(phiDollar[2].strval, phiDollar[4].names, process.NEGATIVE)
		}
	case 18:
		phiDollar = phiS[phipt-4 : phipt+1]
//line parser/parser.y:88
		{
			phiVAL.form = process.NewCall(phiDollar[2].strval, []process.Name{}, process.NEGATIVE)
		}
	case 19:
		phiDollar = phiS[phipt-2 : phipt+1]
//line parser/parser.y:90
		{
			phiVAL.form = process.NewClose(phiDollar[2].name)
		}
	case 20:
		phiDollar = phiS[phipt-4 : phipt+1]
//line parser/parser.y:95
		{
			phiVAL.form = process.NewForward(phiDollar[3].name, phiDollar[4].name, process.POSITIVE)
		}
	case 21:
		phiDollar = phiS[phipt-4 : phipt+1]
//line parser/parser.y:97
		{
			phiVAL.form = process.NewForward(phiDollar[3].name, phiDollar[4].name, process.NEGATIVE)
		}
	case 22:
		phiDollar = phiS[phipt-11 : phipt+1]
//line parser/parser.y:102
		{
			phiVAL.form = process.NewSplit(phiDollar[2].name, phiDollar[4].name, phiDollar[9].name, phiDollar[11].form, process.POSITIVE)
		}
	case 23:
		phiDollar = phiS[phipt-11 : phipt+1]
//line parser/parser.y:104
		{
			phiVAL.form = process.NewSplit(phiDollar[2].name, phiDollar[4].name, phiDollar[9].name, phiDollar[11].form, process.NEGATIVE)
		}
	case 24:
		phiDollar = phiS[phipt-4 : phipt+1]
//line parser/parser.y:106
		{
			phiVAL.form = process.NewWait(phiDollar[2].name, phiDollar[4].form)
		}
	case 25:
		phiDollar = phiS[phipt-2 : phipt+1]
//line parser/parser.y:115
		{
			phiVAL.form = process.NewPrint(phiDollar[2].name)
		}
	case 26:
		phiDollar = phiS[phipt-0 : phipt+1]
//line parser/parser.y:118
		{
			phiVAL.branches = nil
		}
	case 27:
		phiDollar = phiS[phipt-6 : phipt+1]
//line parser/parser.y:119
		{
			phiVAL.branches = []*process.BranchForm{process.NewBranch(process.Label{L: phiDollar[1].strval}, phiDollar[3].name, phiDollar[6].form)}
		}
	case 28:
		phiDollar = phiS[phipt-8 : phipt+1]
//line parser/parser.y:120
		{
			phiVAL.branches = append(phiDollar[1].branches, process.NewBranch(process.Label{L: phiDollar[3].strval}, phiDollar[5].name, phiDollar[8].form))
		}
	case 29:
		phiDollar = phiS[phipt-1 : phipt+1]
//line parser/parser.y:123
		{
			phiVAL.names = []process.Name{phiDollar[1].name}
		}
	case 30:
		phiDollar = phiS[phipt-3 : phipt+1]
//line parser/parser.y:124
		{
			phiVAL.names = append(phiDollar[3].names, phiDollar[1].name)
		}
	case 31:
		phiDollar = phiS[phipt-1 : phipt+1]
//line parser/parser.y:126
		{
			phiVAL.name = process.Name{IsSelf: true}
		}
	case 32:
		phiDollar = phiS[phipt-1 : phipt+1]
//line parser/parser.y:127
		{
			phiVAL.name = process.Name{Ident: phiDollar[1].strval, IsSelf: false}
		}
	case 33:
		phiDollar = phiS[phipt-0 : phipt+1]
//line parser/parser.y:130
		{
			phiVAL.functions = nil
		}
	case 34:
		phiDollar = phiS[phipt-5 : phipt+1]
//line parser/parser.y:132
		{
			phiVAL.functions = []process.FunctionDefinition{{FunctionName: phiDollar[1].strval, Parameters: []process.Name{}, Body: phiDollar[5].form}}
		}
	case 35:
		phiDollar = phiS[phipt-7 : phipt+1]
//line parser/parser.y:134
		{
			phiVAL.functions = append(phiDollar[7].functions, process.FunctionDefinition{FunctionName: phiDollar[1].strval, Parameters: phiDollar[3].names, Body: phiDollar[6].form})
		}
	}
	goto phistack /* stack new state and value */
}
