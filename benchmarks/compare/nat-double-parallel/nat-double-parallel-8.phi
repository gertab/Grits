
///////// Initiate execution /////////

prc[a] : listNat = runTests()
//prc[b] : 1 = printList(a)

///////// Natural number type and function definitions /////////

type nat = +{zero : 1, succ : nat}
type listNat = +{cons : nat * listNat, nil : 1}

let double(x : nat) : nat =
case x (
		zero<x'> => self.zero<x'>
	| succ<x'> => h <- new double(x');
					d : nat <- new d.succ<h>;
					self.succ<d>
)

// Creates an empty list
let emptyList() : listNat =
  term : 1 <- new close self;
  self.nil<term>

// Appends an element to an existing list
let appendElement(elem : nat, K : listNat) : listNat =
  next : nat * listNat <- new (send self<elem, K>);
  self.cons<next>

// Doubles a number 6 times (i.e. produces 2^6). It needs to receive a 'start' message to initiate execution
let performSomeDoubling() : &{start : nat} =
	case self (
		start<result> =>
		a <- new nat1();
		d1 <- new double(a);
		d2 <- new double(d1);
		d3 <- new double(d2);
		d4 <- new double(d3);
		d5 <- new double(d4);
		d6 <- new double(d5);
		fwd result d6
	)
	
// Creates the testing environment
let runTests() : listNat =
    // Spawn all parallel instances
    instance1 <- new performSomeDoubling();
    instance2 <- new performSomeDoubling();
    instance3 <- new performSomeDoubling();
    instance4 <- new performSomeDoubling();
    instance5 <- new performSomeDoubling();
    instance6 <- new performSomeDoubling();
    instance7 <- new performSomeDoubling();
    instance8 <- new performSomeDoubling();

    // Ask all instances to start
    instance1result : nat <- new instance1.start<instance1result>;
    instance2result : nat <- new instance2.start<instance2result>;
    instance3result : nat <- new instance3.start<instance3result>;
    instance4result : nat <- new instance4.start<instance4result>;
    instance5result : nat <- new instance5.start<instance5result>;
    instance6result : nat <- new instance6.start<instance6result>;
    instance7result : nat <- new instance7.start<instance7result>;
    instance8result : nat <- new instance8.start<instance8result>;

    // Collect all results in one list
    list0  <- new emptyList();
    list1 <- new appendElement(instance1result, list0);
    list2 <- new appendElement(instance2result, list1);
    list3 <- new appendElement(instance3result, list2);
    list4 <- new appendElement(instance4result, list3);
    list5 <- new appendElement(instance5result, list4);
    list6 <- new appendElement(instance6result, list5);
    list7 <- new appendElement(instance7result, list6);
    list8 <- new appendElement(instance8result, list7);

    // Forward the list result
    fwd self list8

///////// Natural numbers constants /////////

// 1 : S(0)
let nat1() : nat =
  t : 1 <- new close t;
  z  : nat <- new z.zero<t>;
  s0 : nat <- new s0.succ<z>;
  fwd self s0

///////// Printing Helpers /////////

let consumeNat(n : nat) : 1 =
        case n ( zero<c> => print zero; wait c; close self
               | succ<c> => print succ; consumeNat(c))

let printNat(n : nat) : 1 =
          y <- new consumeNat(n);
          wait y;
          close self

let consumeList(l : listNat) : 1 =
        case l ( cons<c> => print _cons_;
                            <b, L2> <- recv c;
                            bConsume <- new consumeNat(b);
                            wait bConsume;
                            consumeList(L2)
               | nil<c>  => print _nil_;
                            wait c;
                            close self)

let printList(l : listNat) : 1 =
          y <- new consumeList(l);
          wait y;
          close self
